import flpianoroll as flp
from flpianoroll import *

import time

# Needed for FL Studio
def rand_int(seed=None):
    """
    Generate a random non-negative integer

    seed: int or None (generate a seed from current time)
    """
    state = time.time_ns() if seed is None else seed

    while True:
        state = (1103515245 * state + 12345) & 0x7fffffff
        yield state

def rand_uniform(seed=None):
    """
    Generate a random float in the range [0, 1)

    seed: int or None (generate a seed from current time)
    """
    gen = rand_int(seed)

    while True:
        yield next(gen) / 0x80000000
 
rand = rand_uniform(3)
 
def choice(xs): 
    r = int(next(rand) * len(xs))
    return xs[r]
    
# FAKE ENUMS

class UIDMaker :
    def __init__(self) :
        self.id = -1
    
    def new(self) :
        self.id = self.id+1
        return self.id

gensym = UIDMaker()
    
class Modifier:
    "Fake Enum"
    MODAL_INTERCHANGE=gensym.new()
    SEVENTH=gensym.new()
    NINTH=gensym.new()
    SECONDARY=gensym.new()
    VOICE_LEADING=gensym.new()

class SeqTypes :
    "Fake Enum"
    CHORDS = gensym.new()
    EUCLIDEAN = gensym.new()
    BASS = gensym.new()
    TOP = gensym.new()
    RANDOM = gensym.new()
    SCALE = gensym.new()
    


#===============================================================
class Mode:
    major_intervals = [2, 2, 1, 2, 2, 2, 1]
    minor_intervals = [2, 1, 2, 2, 1, 2, 2]

    # Singleton instances
    _major_mode = None
    _minor_mode = None

    def __init__(self, intervals):
        self.intervals = intervals

    @classmethod
    def getMajorMode(cls):
        """Return the singleton instance of the Major mode."""
        if cls._major_mode is None:
            cls._major_mode = Mode(cls.major_intervals)
        return cls._major_mode

    @classmethod
    def getMinorMode(cls):
        """Return the singleton instance of the Minor mode."""
        if cls._minor_mode is None:
            cls._minor_mode = Mode(cls.minor_intervals)
        return cls._minor_mode


    def nth_from(self, root, n):
        """Return the MIDI note number for the nth degree of the scale from the root.
        For the first degree, return the root note itself."""
        if n == 1:
            return root  # Return the root note for the first degree

        note = root
        # Start interval addition from the first interval for the second degree
        for i in range(n - 2 + 1):  # Adjust for 0-indexed intervals list
            note += self.intervals[i % len(self.intervals)]
        return note

    def make_chord_from_pattern(self,root,n,pat) :
        "Given a generic pattern of form [1,3,6] for example, give us the chord of the 1st, 3rd and 6th degree counting up from n, of the scale starting on root"
        return [self.nth_from(root,n+x-1) for x in pat] 
        
    def make_triad(self,root,n):
        "Return triad on degree n of this scale starting at root"
        return self.make_chord_from_pattern(root,n,[1,3,5])
        
    def make_seventh(self,root,n):
        "Return seventh on degree n of this scale starting at root"
        return self.make_chord_from_pattern(root,n,[1,3,5,7])

    def make_ninth(self,root,n):
        "Return seventh on degree n of this scale starting at root"
        return self.make_chord_from_pattern(root,n,[1,3,5,7,9])
        
        
MAJOR = Mode.getMajorMode()
MINOR = Mode.getMinorMode()


# Displaying the most up-to-date ChordThing class

class ChordThing:
    """ChordThing objects are what we parse score strings into.
       They hold all the data needed to create a chord and modify it.
       Note that mode should now be an instance of Mode
    """
    def __init__(self, key, mode: Mode, degree, length=1):
        self.key = key
        self.mode = mode
        self.degree = degree
        self.length = length
        self.modifiers: Set[Modifier] = set()
        self.inversion = 0
        self.secondary_degree = None        

    def set_as_secondary(self, secondary_degree):
        self.modifiers.add(Modifier.SECONDARY)
        self.secondary_degree = secondary_degree
        return self

    def swap_mode(self):
        if self.mode == MAJOR:
            self.mode = MINOR
        else:
            self.mode = MAJOR
        return self
        
    def modal_interchange(self):
        self.modifiers.add(Modifier.MODAL_INTERCHANGE)
        return self

    def has_modal_interchange(self):
        return Modifier.MODAL_INTERCHANGE in self.modifiers        
        
    def seventh(self):
        self.modifiers.add(Modifier.SEVENTH)
        self.modifiers.discard(Modifier.NINTH)
        return self

    def ninth(self):
        self.modifiers.add(Modifier.NINTH)
        self.modifiers.discard(Modifier.SEVENTH)                    
        return self
        
    def set_inversion(self, inversion):
        self.inversion = inversion
        return self
        
    def set_voice_leading(self) :
        self.modifiers.add(Modifier.VOICE_LEADING)
        return self     

    def __str__(self):
        mode = "MAJOR" if self.mode == MAJOR else "MINOR"
        
        # Check if it's a secondary chord and adjust the degree representation accordingly
        if Modifier.SECONDARY in self.modifiers:
            degree_repr = f"({self.secondary_degree}/{self.degree})"
        else:
            degree_repr = str(self.degree)
        
        return "ChordThing(%s,%s,%s,%s,%s) + %s" % (self.key, mode, degree_repr, self.inversion, self.length, self.modifiers)    
    
    def __repr__(self):
        return self.__str__()        

    def clone(self):
        ct = ChordThing(self.key, self.mode, self.degree, self.length)
        ct.modifiers = self.modifiers.copy()
        ct.inversion = self.inversion
        ct.secondary_degree = self.secondary_degree
        return ct

    def has_extensions(self):
        return self.modifiers.intersection({Modifier.SEVENTH, Modifier.NINTH}) != set()
        
    def get_mode(self) :
        if self.has_modal_interchange() :
            return MAJOR if self.mode is MINOR else MINOR
        else :
            return self.mode
            
    def __eq__(self,other) :
        return self.__str__() == other.__str__()            

 
    
class ChordFactory :
    """
    Generates actual chords from data in ChordThing
    """
    
    @classmethod 
    def calculateSecondaryChord(cls,chordThing) :
        new_tonic = chordThing.get_mode().nth_from(chordThing.key,chordThing.degree)
        ct = ChordThing(new_tonic,MAJOR,chordThing.secondary_degree,chordThing.length)

        if Modifier.SEVENTH in chordThing.modifiers : ct.seventh()
        if Modifier.NINTH in chordThing.modifiers : ct.ninth()
        ct.set_inversion(chordThing.inversion)
        return ct
   
    @classmethod
    def generateChordNotes(cls,chordThing) :
        if Modifier.SECONDARY in chordThing.modifiers:
            chordThing = cls.calculateSecondaryChord(chordThing)
        mode = chordThing.get_mode()

        chord = mode.make_triad(chordThing.key,chordThing.degree)
        if Modifier.NINTH in chordThing.modifiers :
            chord = mode.make_ninth(chordThing.key,chordThing.degree)
        elif Modifier.SEVENTH in chordThing.modifiers :
            chord = mode.make_seventh(chordThing.key,chordThing.degree)

        # Apply inversions
        for _ in range(chordThing.inversion):
            chord = chord[1:] + [chord[0] + 12]
            
        return chord     

    @classmethod        
    def chordProgression(cls, chordThings):
        chords = []
        prev_chord = None

        for ct in chordThings:
            chord = cls.generateChordNotes(ct)
            if prev_chord is not None and Modifier.VOICE_LEADING in ct.modifiers :
                chord = voice_lead(prev_chord, chord)
            chords.append(chord)
            prev_chord = chord

        return chords
               
                        


def octave_transform(input_chord, root=60):
    """
    Squish things into a single octave for comparison between chords and sort from lowest to highest.
    """
    return sorted([root + (x % 12) for x in input_chord])

def t_matrix(chord_a, chord_b):
    """
    Get the distances between the notes of two chords.
    """
    transformed_a = octave_transform(chord_a)
    transformed_b = octave_transform(chord_b)
    return [b - a for a, b in zip(transformed_a, transformed_b)]

def get_permutations(lst):
    if len(lst) == 3:
        return [
            [lst[0], lst[1], lst[2]],
            [lst[0], lst[2], lst[1]],
            [lst[1], lst[0], lst[2]],
            [lst[1], lst[2], lst[0]],
            [lst[2], lst[0], lst[1]],
            [lst[2], lst[1], lst[0]]
        ]
    elif len(lst) == 4:
        return [
            [lst[0], lst[1], lst[2], lst[3]],
            [lst[0], lst[1], lst[3], lst[2]],
            [lst[0], lst[2], lst[1], lst[3]],
            [lst[0], lst[2], lst[3], lst[1]],
            [lst[0], lst[3], lst[1], lst[2]],
            [lst[0], lst[3], lst[2], lst[1]],
            [lst[1], lst[0], lst[2], lst[3]],
            [lst[1], lst[0], lst[3], lst[2]],
            [lst[1], lst[2], lst[0], lst[3]],
            [lst[1], lst[2], lst[3], lst[0]],
            [lst[1], lst[3], lst[0], lst[2]],
            [lst[1], lst[3], lst[2], lst[0]],
            [lst[2], lst[0], lst[1], lst[3]],
            [lst[2], lst[0], lst[3], lst[1]],
            [lst[2], lst[1], lst[0], lst[3]],
            [lst[2], lst[1], lst[3], lst[0]],
            [lst[2], lst[3], lst[0], lst[1]],
            [lst[2], lst[3], lst[1], lst[0]],
            [lst[3], lst[0], lst[1], lst[2]],
            [lst[3], lst[0], lst[2], lst[1]],
            [lst[3], lst[1], lst[0], lst[2]],
            [lst[3], lst[1], lst[2], lst[0]],
            [lst[3], lst[2], lst[0], lst[1]],
            [lst[3], lst[2], lst[1], lst[0]]
        ]
    else:
        return [lst]  # Return the list itself if it's not of length 3 or 4


def voice_lead(chord_a, chord_b):
    """
    Determine the voice leading between two chords.
    """
    transformed_a = octave_transform(chord_a)
    transformed_b = octave_transform(chord_b)

    # If chord_a has more notes than chord_b, drop the excess notes from chord_a
    while len(transformed_a) > len(transformed_b):
        transformed_a.pop()  # Drop the highest note

    # If chord_b has more notes than chord_a, drop the excess notes from chord_b
    while len(transformed_b) > len(transformed_a):
        transformed_b.pop()  # Drop the highest note

    best_voicing = None
    min_distance = float('inf')

    for permuted_b in get_permutations(transformed_b):
        t_mat = t_matrix(transformed_a, list(permuted_b))
        total_distance = sum(abs(t) for t in t_mat)
        
        # Penalize for notes that are too close to each other
        for i in range(len(permuted_b) - 1):
            if abs(permuted_b[i] - permuted_b[i + 1]) in [1, 2]:  # If notes are a semitone or a tone apart
                total_distance += 10  # Add a penalty

        if total_distance < min_distance:
            min_distance = total_distance
            best_voicing = [a + t for a, t in zip(chord_a, t_mat)]

    return best_voicing



class ChordParser:
    def __init__(self, key, mode):
        self.key = key
        self.mode = mode
        
    def _parse_separator(self, input_string):
        separators = ['|', ',', '&']
        if input_string and (input_string[0] in separators):
            return input_string[0], input_string[1:]
        else:
            return None, input_string
    
    def _parse_transpose(self, input_string):
        transpose_chars = []
        while input_string and input_string[0] not in [',', '|']:
            transpose_chars.append(input_string[0])
            input_string = input_string[1:]
        transpose_string = ''.join(transpose_chars).strip()
        if transpose_string[0] not in ['>', '<']:
            raise ValueError(f"Expected '>' or '<' at the start of '{transpose_string}'")
        transpose_value = int(transpose_string[1:])
        if transpose_string[0] == '>':
            self.key += transpose_value
        else:
            self.key -= transpose_value
        return input_string
    
    def _parse_item(self, input_string):
        item_chars = []
        inside_parentheses = False
        while input_string and (inside_parentheses or (input_string[0] not in [',', '|', '&', '>', '<'])):
            char = input_string[0]
            if char == '(':
                inside_parentheses = True
            elif char == ')':
                inside_parentheses = False
            item_chars.append(char)
            input_string = input_string[1:]
        return ''.join(item_chars).strip(), input_string

    def _interpret_item(self, item_string):
        is_modal_interchange = False
        if item_string.startswith('-'):
            is_modal_interchange = True
            item_string = item_string[1:]

        # extract inversion from item_string
        inversion = 0
        if 'i' in item_string:
            inversion = item_string.count('i')
            item_string = item_string.replace('i', '')

        # Check for secondary notation (y/x)
        if '(' in item_string and ')' in item_string:
            extension = None
            parts = item_string.split('(')
            if len(parts[0]) > 0:
                extension = int(parts[0])
            secondary_degree, degree = map(int, parts[1][:-1].split('/'))
            chord = ChordThing(self.key, self.mode, degree)
            chord.set_as_secondary(secondary_degree)
            chord.set_inversion(inversion)
            if extension in [7, 9]:  # Add logic for other extensions if needed
                chord.seventh() if extension == 7 else chord.ninth()
            return chord

        item_value = int(item_string)
        
        if 1 <= item_value <= 7:
            chord = ChordThing(self.key, self.mode, item_value)
        elif 71 <= item_value <= 77:
            chord = ChordThing(self.key, self.mode, item_value - 70).seventh()
        elif 91 <= item_value <= 97:
            chord = ChordThing(self.key, self.mode, item_value - 90).ninth()
        else:
            raise ValueError(f"Unexpected item value: {item_string}")
        
        if is_modal_interchange:
            chord.modal_interchange()
        
        chord.set_inversion(inversion)
        
        return chord
    
    def parse(self, input_string):
        chords = []
        
        while input_string:
            separator, input_string = self._parse_separator(input_string)
            if separator == '&':
                voice_lead_next = True
            else:
                voice_lead_next = False
                
            if input_string:
                if input_string[0] == '!':
                    self.mode = MINOR if self.mode == MAJOR else MAJOR
                    input_string = input_string[1:]
                elif input_string[0] in ['>', '<']:
                    input_string = self._parse_transpose(input_string)
                else:
                    item_string, input_string = self._parse_item(input_string)
                    chord = self._interpret_item(item_string)
                    if voice_lead_next:
                        chord.set_voice_leading()
                    chords.append(chord)
        
        return chords
        
        
class ChordProgression :
    def __init__(self,key,mode: Mode,scoreString) :
        self.key = key
        self.mode = mode
        self.scoreString = scoreString
    
    def toChordThings(self) :
    	return ChordParser(self.key,self.mode).parse(self.scoreString)
    	
    def toNotes(self) :
        return ChordFactory.chordProgression(self.toChordThings())
        
 

class Note :
    def __init__(self, note, time, length) :
        self.note = note
        self.time = time
        self.length = length
        
class TimeManipulator:
    def __init__(self, beat_code, note_proportion, chord_multiplier, ppq):
        # Mapping from beat_code to fractions of a beat
        self.beat_mapping = {
            0: 1/16,
            1: 1/12,
            2: 1/8,
            3: 1/6,
            4: 1/4,
            5: 1/3,
            6: 1/2,
            7: 1/1
        }
        
        self.ppq = ppq
        self.beat_fraction = self.beat_mapping[beat_code]
        self.note_proportion = note_proportion
        self.chord_multiplier = chord_multiplier
        
        self.beat_length = self.ppq * self.beat_fraction
        self.note_length = self.beat_length * self.note_proportion
        self.chord_length = self.beat_length * self.chord_multiplier

    @staticmethod
    def distribute_pulses_evenly(k, n):
        rhythm = [0] * n
        step_size = n / k
        current_step = 0
        for _ in range(k):
            i = int(round(current_step))
            rhythm[i] = 1
            current_step += step_size
        return rhythm

    def rhythm_generator(self, k, n):
        rhythm = TimeManipulator.distribute_pulses_evenly(k, n)
        index = 0
        while True:
            yield rhythm[index]
            index = (index + 1) % len(rhythm)
    
    @staticmethod
    def chord_note_generator(chord, step=1):
        index = 0
        while True:
            yield chord[index]
            index = (index + step) % len(chord)

    def chords(self, seq, start_time):
        all_notes = []
        current_time = start_time
        
        for c in seq:
            # Play all the notes of the chord simultaneously
            for note in c:
                all_notes.append({
                    'note': note,
                    'start_time': current_time,
                    'length': self.note_length * self.chord_multiplier * 0.5  # half the duration of chord's period
                })
            current_time += self.beat_length * self.chord_multiplier
        
        return all_notes


    def noteline(self, n_gen, r_gen, seq, start_time):
        """Generic note creator, customize with specific note choosing algorithm passed as argument f"""
        all_notes = []
        current_time = start_time

        rhythm_gen = r_gen()

        for c in seq:

            beats_for_current_chord = 0
            note_gen = n_gen(c)

            while beats_for_current_chord < self.chord_multiplier:
                beat = next(rhythm_gen)

                if beat == 1:  # If the beat is a "hit"
                    all_notes.append({
                        'note': next(note_gen),
                        'start_time': current_time,
                        'length': self.note_length
                    })
                current_time += self.beat_length
                beats_for_current_chord += 1
                # Reset the rhythm generator after finishing the beats for one chord
                if beats_for_current_chord == self.chord_multiplier:
                    rhythm_gen = r_gen()

        return all_notes


    def bassline(self, seq, k, n, start_time):
        def lowest(c) : 
            while True :
                yield c[0] - 12  # root note one octave down
        def rhythm() :
            return self.rhythm_generator(k, n)
            
        return self.noteline(lowest, rhythm, seq, start_time)

    def topline(self, seq, k, n, start_time):
        def top(c) : 
            while True :
                yield c[-1] + 12  # top note one octave up
        def rhythm() :
            return self.rhythm_generator(k, n)                
        return self.noteline(top, rhythm, seq, start_time)

    def randline(self, seq, k, n, start_time):
        def r(c) : 
            while True :
                yield choice(c) + 12  # random note one octave up
        def rhythm() :
            return self.rhythm_generator(k, n)
        return self.noteline(r, rhythm, seq,  start_time)
        
    def arpeggiate(self, seq, k, n, start_time):
        def gen(c) :
            return TimeManipulator.chord_note_generator(c)
        def rhythm() :
            return self.rhythm_generator(k, n)            
        return self.noteline(gen, rhythm, seq,  start_time)
                
    def scaleline(self,seq, k, n, start_time):
        """NOT IMPLEMENTED
        Problem is how to get the scale at this point.
        seq is just a list of chords which are list of notes. We've thrown away the information 
        necessary to say which key / mode we're in.
        We could pass these in as an argument, but modifiers like secondary 
        may have already taken us out of the key""" 
        
        
        return []
                
    def silentline(self, seq, k, n, start_time):
        def r(c) :
            while True :
                yield None
        def rhythm() :
            while True :
                yield 0
        return self.noteline(r,rhythm, seq, start_time)
        

    def grabCombo(self,seq,k,n,start_time,seqset) :
        
        notes = []
        for val in seqset :
        
            if val == SeqTypes.CHORDS :
                notes = notes + self.chords(seq,start_time)
            if val == SeqTypes.EUCLIDEAN :
                notes = notes + self.arpeggiate(seq,k,n,start_time)
            if val == SeqTypes.BASS :
                notes = notes + self.bassline(seq,k,n,start_time)
            if val == SeqTypes.TOP :        
                notes = notes + self.topline(seq,k,n,start_time)
            if val == SeqTypes.RANDOM :          
                notes = notes + self.randline(seq,k,n,start_time)
            if val == SeqTypes.SCALE :           
                notes = notes + self.scaleline(seq,k,n,start_time)
        
        return notes
                

class GoldenData :
    def __init__(self) :
        self.changed = True
        self.current_str = ""
        
    def update(self,root,mode,chordSeq,seqset,division,note_prop,chord_len,k,n) :
        self.root = root
        self.mode = mode
        self.chordSeq = chordSeq
        self.generate = seqset
        self.division = division
        self.note_prop = note_prop
        self.chord_len = chord_len
        self.k = k
        self.n = n
        self.old_str = self.current_str
        self.current_str = "%s"%self
        if self.old_str != self.current_str :
            self.changed = True
        else :
            self.changed = False
        
    def __str__(self) :
        return """\r\n
-------------------------------------------\r\n
Root : %s\r\n
Mode : %s\r\n
ChordSeq : %s\r\n
Generate Type: %s\r\n
Division : %s\r\n
Note Proportion : %s\r\n
Chord Length : %s\r\n
Euclidean: k=%s, n=%s\r\n
...........................................
     
""" % (self.root, self.mode, self.chordSeq, self.generate, self.division,
self.note_prop,self.chord_len,self.k,self.n)

CURRENT_DATA = GoldenData()         


  
def makeNote(num, time, length, color=0, velocity=0.8):
    """
    make a new Note object

    num: pitch
    time: time in ticks
    length: duration in ticks
    color: int in [0: 16)
    """
    note = flp.Note()
    note.number = int(num)
    note.time = int(time)
    note.length = int(length)
    note.color = int(color)
    note.velocity = 65 # int(64 + rand()*64)
    return note
      
def createDialog():
    form = flp.ScriptDialog("GoldenPond",
    'GoldenPond is language for defining chord progressions.\r\nThis is the FL Studio version which also lets you create rhythmic patterns for arpeggios and melodies.\r\nSee http://gilbertlisterresearch.com/ for more information and documentation.')
    
    form.AddInputKnobInt('Root',65,32,96)
    form.AddInputCombo('Mode',["major","minor"],0)
    form.AddInputText('ChordSeq', "1,4,5,1")
    
    form.AddInputCheckbox('Chords',False)
    form.AddInputCheckbox('Euclidean',False)
    form.AddInputCheckbox('Bass',False)
    form.AddInputCheckbox('Top',False)
    form.AddInputCheckbox('Random',False)
    form.AddInputCheckbox('Scale',False)    
    
    form.AddInputKnobInt('Rhythm k',4,1,24)
    form.AddInputKnobInt('Rhythm n',8,1,24)
    
    form.AddInputCombo('Division',["1/16","1/12","1/8","1/6","1/4","1/3","1/2","1"],4)
    form.AddInputKnob('Note Proportion',0.8,0.1,1.5)
    form.AddInputKnobInt('Chord Length',4,1,16)
    
    form.AddInputKnobInt("Stutter",0,0,16)
    form.AddInputCheckbox("Silent",False)
    

    #form.AddInputCombo('Generate',['Chords','Euclidean','Bass','C+E','E+B','C+B','All','All E+12','Top'],0)

    return form


def post_notes_to_score(notes_list):
    for note_data in notes_list:
        note_value = note_data['note']
        start_time = note_data['start_time']
        note_duration = note_data['length']
            
        note = makeNote(note_value, start_time, note_duration)
        flp.score.addNote(note)


def transpose_all(all_notes, n):
    transposed = [{'note': note_entry['note'] + n, 
                   'start_time': note_entry['start_time'], 
                   'length': note_entry['length']} for note_entry in all_notes]
    return transposed
 


        
def apply(form):
    # get list of current notes
    root = form.GetInputValue('Root')
    mode = form.GetInputValue('Mode')
    chordSeq = form.GetInputValue('ChordSeq')
    #gtype = form.GetInputValue('Generate')
    
    seqtypes = set([])
    if form.GetInputValue("Chords")==1: seqtypes.add(SeqTypes.CHORDS)
    if form.GetInputValue("Euclidean")==1: seqtypes.add(SeqTypes.EUCLIDEAN)
    if form.GetInputValue("Bass")==1: seqtypes.add(SeqTypes.BASS)
    if form.GetInputValue("Top")==1: seqtypes.add(SeqTypes.TOP)
    if form.GetInputValue("Random")==1: seqtypes.add(SeqTypes.RANDOM)
    if form.GetInputValue("Scale")==1: seqtypes.add(SeqTypes.SCALE)

    division = form.GetInputValue('Division')
    note_prop = form.GetInputValue('Note Proportion')
    chord_len = form.GetInputValue('Chord Length')
 
    
    k = form.GetInputValue('Rhythm k')
    n = form.GetInputValue('Rhythm n')

    stutter = form.GetInputValue("Stutter")

    timingInfo = TimeManipulator(division, note_prop, chord_len, flp.score.PPQ)

    flp.score.clearNotes(False)

    if form.GetInputValue("Silent")==1 : return
    try : 
        if mode == "major" : 
            theMode = MAJOR
        else :
            theMode = MINOR
        seq = ChordProgression(root,theMode,chordSeq).toNotes()

        # handle stuttering (ie. repeat the first stutter val of the seq until the lenseq)
        if stutter > 0 :
            lenseq = len(seq)
            frag = seq[:stutter]
            seq=(frag*100)[:lenseq]

        time = 0
        all_notes = timingInfo.grabCombo(seq,k,n,0,seqtypes)
        post_notes_to_score(all_notes)
        
        CURRENT_DATA.update(root,mode,chordSeq,seqtypes,division,note_prop,chord_len,k,n)
        if CURRENT_DATA.changed :
            Utils.log("Changed\n%s" % CURRENT_DATA)
            
    except Exception as e :
        Utils.log("Exception\n%s" % e)
        
